#!/usr/bin/env ruby
require 'gli'
require 'tdoo'

include GLI::App

program_desc 'A mini todo command-line application'

version Tdoo::VERSION

desc 'Path to the todo file'
default_value '~/.tdoo.txt'
arg_name 'todo_file'
flag [:f,:filename]

desc 'Create a new task in the task list'
long_desc "
A task has a name and belongs to a project that you need to specify.
e.g. tdoo new -p today \"Happy coding!\"
"
arg_name 'task'
command [:new, :n] do |c|
  c.desc 'specify the project'
  c.arg_name 'project'
  c.flag [:p, :project]

  c.action do |global_options,options,task_names|
    data = File.expand_path(global_options[:filename])
    unless File.exist?(data)
      puts "Creating #{data}" 
      File.new(data, 'w+')
    end 

    formatter = Tdoo::Format::Pretty.new
    File.open(data, 'a+') do |todo_file|
      raise "You must specify the project's name that new tasks belong to... 'tdoo new -h' for help!" if options[:p].nil?

      if task_names.empty?
        puts "Reading new tasks from stdin..."
        task_names = STDIN.readlines.map { |a| a.chomp }
      end

      project = options[:p]

      tasks = 0
      todo_file.each_line do |line|
        tasks += 1 if line.chomp.split(',')[0] == project  
      end

      task_names.each_with_index do |task, index|
        t = Time.now.strftime("%Y-%m-%d %H:%M:%S")
        todo_file.puts [project, index+tasks, task, t].join(',')
        formatter.format_todo(project, index+tasks, task, t)
      end

      formatter.after
    end
  end
end

desc 'List all tasks'
long_desc "
By default, the format of the output is pretty. A task has two status, todo and done, that will be
different colors. Red is for todo tasks and green is for done tasks instead.
e.g. tdoo list -p today
"
command [:list, :ls] do |c|

  c.desc 'List all tasks belong to a certain project'
  c.arg_name 'project'
  c.flag [:p, :project]

  c.action do |global_options,options,args|

    formatter = Tdoo::Format::Pretty.new
    project_flag = options[:p].nil? ? false : true
    data = File.read(File.expand_path(global_options[:filename])) 
    data.each_line do |line|
      field = line.chomp.split(',')
      project = field[0]
      completed = field.count
      if project_flag
        if (completed == 4) && (project == options[:p])
          formatter.format_todo(field[0], field[1], field[2], field[3])
        elsif project == options[:p]
          formatter.format_done(field[0], field[1], field[2], field[3], field[4])
        end 
      else
        if completed == 4
          formatter.format_todo(field[0], field[1], field[2], field[3])
        else
          formatter.format_done(field[0], field[1], field[2], field[3], field[4])
        end
      end
    end

    formatter.after
  end
end

desc 'Complete a task'
arg_name 'task_number'
long_desc "
Done tasks will be added the completed time after the end of task. 
However, done tasks will be deleted permanently if you turn the delete switch on.
e.g. tdoo done -d -p today 0
"
command [:done, :d] do |c|
  c.desc 'specify the project\'s name that done tasks belong to'
  c.arg_name 'project'
  c.flag [:p, :project]

  c.desc 'delete the done tasks'
  c.switch [:d, :delete]

  c.action do |global_options,options,task_number|
    old_file = File.expand_path(global_options[:filename])
    new_file = old_file + '.new'  
    delete_switch = options[:d] ? true : false

    formatter = Tdoo::Format::Pretty.new
    File.open(old_file, 'r') do |todo_file|
      raise "You must specify the project's name that done tasks belong to...'tdoo done -h' for help!" if options[:p].nil?
      raise "you must point the done task number out...'tdoo done -h' for help!" if task_number.empty?

      # Open a new file and write into tasks which meet some conditions. 
      # A done task can be split up into 5 pieces. 
      File.open(new_file, 'w+') do |new_todo_file|
        todo_file.readlines.each do |line|
          field = line.chomp.split(',')
          project, number = field[0], field[1]
          if (project == options[:p]) && (field[1] == task_number.first) && (field.count == 4)
            t = Time.now.strftime("%Y-%m-%d %H:%M:%S")
            new_todo_file.puts("#{line.chomp}"+",#{t}") unless delete_switch 
            formatter.format_done(field[0], field[1], field[2], field[3], t) 
          elsif (project == options[:p]) && (field[1] == task_number.first) && (field.count == 5)
            new_todo_file.puts(line) unless delete_switch
            formatter.format_done(field[0], field[1], field[2], field[3], field[4]) 
          else
            new_todo_file.puts(line)
          end
        end
      end
    end

    formatter.after
    `rm #{old_file} && mv #{new_file} #{old_file}`
  end
end

pre do |global,command,options,args|
  true
end

post do |global,command,options,args|
end

on_error do |exception|
  true
end

exit run(ARGV)
